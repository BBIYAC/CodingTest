'''
효율적인 화폐 구성
N가지 종류의 화폐들의 개수를 최소한으로 이용하여 그 가치의 합이
M원이 되도록 한다.

# 입력 조건
1. 첫째 줄에 N, M
2. 이후 N개의 줄에는 각 화폐의 가치가 주어진다.

# 출력 조건
1. 첫째 줄에 M원을 만들기 위한 최소한의 화폐 개수 출력
2. 불가능할 때는 -1 출력

# 입력 조건 1
2 15
2
3

# 출력 조건 1
5

# 입력 조건 2
3 4
3
5
7

# 출력 조건 2
-1
'''
# 화폐 종류 n, 원하는 화폐 가치의 합 m
n, m = map(int, input('>> ').split())
money = []
# n개의 화폐 가치 입력
for i in range(n):
    money.append(int(input('>> ')))

def dp_solution():
    # 10001로 초기화(큰 값)
    d = [10001]*(m+1)
    # 0원은 아무것도 사용하지 않았을 때 가능하기 때문에 0으로 지정
    d[0] = 0
    # 화폐로 만드는 방법이 존재하는 경우
    for i in range(n):
        for j in range(money[i], m+1):
            # 점화식-더 작은 화폐로 구성했을 때와 큰 화폐를 비교하여 작은 값 저장
            d[j] = min(d[j], d[j-money[i]]+1) 
            print(money[i], j, d)

    # 주어진 화폐로 M원을 만드는 방법이 없는 경우 -1
    if d[m] == 10001:
        d[m] = -1
    return d[m]

print(dp_solution())